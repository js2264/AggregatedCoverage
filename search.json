[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 AggregatedCoverage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/AggregatedCoverage.html","id":"using-example-datasets","dir":"Articles","previous_headings":"","what":"Using example datasets","title":"Introduction to AggregatedCoverage","text":"","code":"library(plyranges) library(rtracklayer)  # ~~~~~~~~~~~~~~~ Import genomic features ~~~~~~~~~~~~~~~ # scc1_peaks <- system.file(\"extdata\", \"Scc1-peaks.narrowPeak\", package = \"AggregatedCoverage\") |>      import() conv_loci <- system.file(\"extdata\", \"conv_transcription_loci.bed\", package = \"AggregatedCoverage\") |>      import() gr_list <- GRangesList(Scc1 = scc1_peaks, Conv_transcription = conv_loci)  # ~~~~~~~~~~~~~~~ Import coverage tracks ~~~~~~~~~~~~~~~ # bw_list <- list(     Scc1 = system.file(\"extdata\", \"Scc1-vs-input.bw\", package = \"AggregatedCoverage\") |> import(as = 'Rle'),      RNA_fwd = system.file(\"extdata\", \"SRR2045244.fwd.CPM.bw\", package = \"AggregatedCoverage\") |> import(as = 'Rle'),      RNA_rev = system.file(\"extdata\", \"SRR2045244.rev.CPM.bw\", package = \"AggregatedCoverage\") |> import(as = 'Rle') )  # ~~~~~~~~~~~~~~~ Compute aggregated coverage ~~~~~~~~~~~~~~~ # AC <- AggregatedCoverage(bw_list, gr_list, width = 3001) df <- as_tibble(AC)  # ~~~~~~~~~~~~~~~ Plot aggregated coverage ~~~~~~~~~~~~~~~ # library(ggplot2) ggplot(df, aes(x = coord, y = mean, col = sample)) +      geom_ribbon(aes(ymin = ci_low, ymax = ci_high, fill = sample), col = NA, alpha = 0.2) +      geom_line() +      facet_grid(~ features) +      theme_bw()"},{"path":[]},{"path":"/articles/AggregatedCoverage.html","id":"recovering-tsss-of-forward-human-genes","dir":"Articles","previous_headings":"Using AnnotationHub and TxDb resources","what":"Recovering TSSs of forward human genes","title":"Introduction to AggregatedCoverage","text":"","code":"library(GenomicRanges) txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene TSSs <- GenomicFeatures::genes(txdb) |>      filter(strand == '+') |>      anchor_5p() |>      mutate(width = 1)"},{"path":"/articles/AggregatedCoverage.html","id":"recovering-h3k4me3-coverage-track-from-encode","dir":"Articles","previous_headings":"Using AnnotationHub and TxDb resources","what":"Recovering H3K4me3 coverage track from ENCODE","title":"Introduction to AggregatedCoverage","text":"","code":"library(AnnotationHub) ah <- AnnotationHub() H3K4me3_bw <- ah[['AH34904']] H3K4me3_cov <- import(H3K4me3_bw, as = 'Rle')"},{"path":"/articles/AggregatedCoverage.html","id":"computing-the-aggregated-coverage-of-h3k4me3-4kb-around-the-tsss-of-forward-human-genes","dir":"Articles","previous_headings":"Using AnnotationHub and TxDb resources","what":"Computing the aggregated coverage of H3K4me3 ± 4kb around the TSSs of forward human genes","title":"Introduction to AggregatedCoverage","text":"","code":"library(AggregatedCoverage) AC <- AggregatedCoverage(H3K4me3_cov, TSSs, width = 8000L) plot(AC)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jacques (2023). Jacques' Package. doi:10.18129/B9.bioc.AggregatedCoverage, https://github.com//AggregatedCoverage - R package version 0.99.0, http://www.bioconductor.org/packages/AggregatedCoverage. Jacques (2023). “Jacques' Package.” bioRxiv. doi:10.1101/TODO, https://www.biorxiv.org/content/10.1101/TODO.","code":"@Manual{,   title = {Jacques' Package},   author = {{Jacques}},   year = {2023},   url = {http://www.bioconductor.org/packages/AggregatedCoverage},   note = {https://github.com//AggregatedCoverage - R package version 0.99.0},   doi = {10.18129/B9.bioc.AggregatedCoverage}, } @Article{,   title = {Jacques' Package},   author = {{Jacques}},   year = {2023},   journal = {bioRxiv},   doi = {10.1101/TODO},   url = {https://www.biorxiv.org/content/10.1101/TODO}, }"},{"path":[]},{"path":"/reference/AggregatedCoverage.html","id":null,"dir":"Reference","previous_headings":"","what":"AggregatedCoverage — AggregatedCoverage","title":"AggregatedCoverage — AggregatedCoverage","text":"function initiates AggregatedCoverage object.","code":""},{"path":"/reference/AggregatedCoverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AggregatedCoverage — AggregatedCoverage","text":"","code":"AggregatedCoverage(tracks, features, width, BPPARAM = BiocParallel::bpparam())"},{"path":"/reference/AggregatedCoverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AggregatedCoverage — AggregatedCoverage","text":"tracks Named list genomic tracks (RleList) features Named GRangesList width Width feature rescaled BPPARAM Passed BiocParallel","code":""},{"path":"/reference/AggregatedCoverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AggregatedCoverage — AggregatedCoverage","text":"AggregatedCoverage object","code":""},{"path":"/reference/AggregatedCoverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AggregatedCoverage — AggregatedCoverage","text":"","code":"library(plyranges) #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: IRanges #> Loading required package: S4Vectors #> Loading required package: stats4 #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: GenomicRanges #> Loading required package: GenomeInfoDb #>  #> Attaching package: ‘plyranges’ #> The following object is masked from ‘package:IRanges’: #>  #>     slice #> The following object is masked from ‘package:stats’: #>  #>     filter library(rtracklayer) scc1_peaks <- system.file(\"extdata\", \"Scc1-peaks.narrowPeak\", package = \"AggregatedCoverage\") |>      import() conv_loci <- system.file(\"extdata\", \"conv_transcription_loci.bed\", package = \"AggregatedCoverage\") |>      import() features <- GRangesList(Scc1 = scc1_peaks, Conv_transcription = conv_loci) tracks <- list(     Scc1 = system.file(\"extdata\", \"Scc1-vs-input.bw\", package = \"AggregatedCoverage\") |> import(as = 'Rle'),      RNA_fwd = system.file(\"extdata\", \"SRR2045244.fwd.CPM.bw\", package = \"AggregatedCoverage\") |> import(as = 'Rle'),      RNA_rev = system.file(\"extdata\", \"SRR2045244.rev.CPM.bw\", package = \"AggregatedCoverage\") |> import(as = 'Rle') ) AC <- AggregatedCoverage(tracks, features, 3000) AC #> class: AggregatedCoverage  #> dim: 2 3  #> metadata(0): #> assays(8): mean median ... ci_low ci_high #> rownames(2): Scc1 Conv_transcription #> rowData names(1): features #> colnames(3): Scc1 RNA_fwd RNA_rev #> colData names(1): track"}]
